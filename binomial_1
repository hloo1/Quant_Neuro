%exercise 1

for k = 0:10
    n = 10;
    p = 0.2;
    b = nchoosek(n,k);
    P = b * p^k * (1-p)^(n-k);
    disp(P)
end 

%exercise 2
for p = 0.1:0.1:1
    n=14;
    k=8;
    b = nchoosek(n,k);
    P1 = binopdf(k,n,p);
    disp(P1)
end

%exercise 3
%total likelihood = likelihood 1 * likelihood 2
n=14;
k1=8;
k2=5;
p=0.1;
b1 = nchoosek(n,k1);
b2 = nchoosek(n, k2);
P1 = binopdf (k1,n,p);
P2 = binopdf(k2,n,p);

total_likelihood = P1 * P2
total_log_likelihood = log(P1) + log (P2)

for p = 0.1:0.1:1
    n=14;
    k1=8;
    k2=5;
    b1 = nchoosek(n,k1);
    b2 = nchoosek(n, k2);
    P1 = binopdf (k1,n,p);
    P2 = binopdf(k2,n,p);
    total_likelihood = P1 * P2
    total_log_likelihood = log(P1) + log (P2)
end
%maximum value = 0.0224
%estimate improves as sample size increases

subplot(2,1,1); cla reset; hold on;
ylabel('Likelihood');
likelihoodFcn = prod(probs,2);   % Compute the product
plot(ps, likelihoodFcn);         % Plot it
maxLikelihood = max(likelihoodFcn); % Get the maximum likelihood
plot(ps(likelihoodFcn==maxLikelihood), maxLikelihood, 'ko');

% The log-likelihood function is the sum of log-likelihoods (assuming
% independence)
subplot(2,1,2); cla reset; hold on;
ylabel('Log-likelihood');
logLikelihoodFcn = sum(log(probs),2); % Compute the sum
plot(ps, logLikelihoodFcn);      % Plot it
maxLogLikelihood = max(logLikelihoodFcn); % Get the maximum likelihood
plot(ps(logLikelihoodFcn==maxLogLikelihood), maxLogLikelihood, 'ko');

n = 14;                       % number of available quanta
pRelease = 0.3;               % assumed probability of release
ks = 0:n;                     % possible values of k
ps = 0:0.01:1.0;              % possible release probabilities
pdat = zeros(length(ps), 2);  % pre-allocate matrix to hold likelihoods per p
TINY = 0.0001;                % to avoid multiplying/taking logs of really small numbers
for sampleSize = round(logspace(0,3,30))  % try different sample sizes
   
   % Simulate experiments -- get simulated counts for the given n,
   % pRelease, and number of experiments
   sCounts = binornd(n,pRelease,sampleSize,1);
   
   % Plot experiment, theoretical binomial pdf
   subplot(3,1,1); cla reset; hold on;
   title(sprintf('Sample size = %d', sampleSize))
   ylabel('Probability');
   xlabel('Release count');
   xlim([ks(1) ks(end)]);
   
   % Plot normalized histogram of simulated counts
   sCountHistogram = hist(sCounts, ks);
   bar(ks, sCountHistogram./sum(sCountHistogram));
   
   % Plot theoretical pdf
   plot(ks, binopdf(ks, n, pRelease), 'ro-');
   
   % compute (log) lik for each p
   pdat(:,1) = 1; % initialize so we can keep track of product of likelihoods
   pdat(:,2) = 0; % initialize so we can keep track of sum of log-likelihoods
   
   % Loop through each possible value of release probability
   for pp = 1:length(ps)
      
      % Compute the probabilities of obtaining the data, given the assumed
      % release probabilty
      probs = binopdf(ks, n, ps(pp));
      
      % Loop through each possible value of k we could have obtained in the
      % simulated experiment
      for cc = 1:length(ks)
         
         % Did we actually obtain that particular value of k?
         if sCountHistogram(cc) > 0
            
            % Avoid really small numbers
            if probs(cc) < TINY
               lprob = log(TINY);
               pprob = TINY;
            else
               lprob = log(probs(cc));
               pprob = probs(cc);
            end
            
            % Product of likelihoods
            pdat(pp,1) = pdat(pp,1).*pprob.^sCountHistogram(cc);
            
            % Sum of log likelihoods
            pdat(pp,2) = pdat(pp,2)+lprob.*sCountHistogram(cc);
         end
      end
   end
   
   % Use binofit to estimate p from the simulated data. This uses a trick
   % that assumes all of the measurements are independent and lumps them
   % together as if they were one big experiment.
   [phat, pci] = binofit(sum(sCounts),sampleSize*14);
   
   % Plot product of likelihoods
   %
   subplot(3,1,2); cla reset; hold on;
   ylabel('likelihood');

   % Plot the likelihood function (product of likelihoods)
   plot(ps, pdat(:,1));
   
   % Find the maximum
   maxp = max(pdat(:,1));
   
   % Show the actual pRelease value as a dashed line
   plot(pRelease.*[1 1], [0 maxp], 'r--');
   
   % Show the values obtained from binofit + CI
   plot(pci, maxp.*[1 1], 'm-', 'LineWidth', 2);
   plot(phat, maxp, 'm*');
   
   % Show the maximum value of our computed likelihood function
   plot(ps(pdat(:,1)==maxp), maxp, 'ko', 'MarkerSize', 12); 
   
   % plot sum of log-likelihoods
   %
   subplot(3,1,3); cla reset; hold on;
   ylabel('log likelihood');
   xlabel('Release probability');
   axis([0 1 log(TINY)*1000 0]);

   % Plot the likelihood function (sum of log-likelihoods)
   plot(ps, pdat(:,2));
   
   % Find the maximum
   maxp = max(pdat(:,2));
   
   % Show the actual pRelease value as a dashed line
   plot(pRelease.*[1 1], [0 min(pdat(:,2))], 'r--');
   
   % Show the values obtained from binofit + CI
   plot(pci, maxp.*[1 1], 'm-', 'LineWidth', 2);
   plot(phat, maxp, 'm*');

   % Show the maximum value of our computed likelihood function
   plot(ps(pdat(:,2)==maxp), maxp, 'g*'); 
   
   % Wait
   pause(0.1);
end

%tried my best, but had issues with the last part of exercise 3

%exercise 4
counts = [0	0 3 10 19 26 16 16 5 5 0 0 0 0 0];
n = length(counts)-1;
ks = 0:n;  
nks = length(ks);
ps = (0:0.01:1.0)';
nps = length(ps); 

probs = binopdf( ...
   repmat(ks, nps, 1), ...
   n, ... 
   repmat(ps, 1, nks));  

countsMatrix = repmat(counts, nps, 1);
likelihoodFcn = prod(probs.^countsMatrix,2);
pHat_fromLiklihood = ps(likelihoodFcn==max(likelihoodFcn))

logLikelihoodFcn = sum(log(probs).*countsMatrix,2);
pHat_fromLogLikelihood = ps(logLikelihoodFcn==max(logLikelihoodFcn))

pHat = binofit(sum(counts.*ks),sum(counts)*n)

%exercise 5
p=0.3;
n=14;
k=7;
pHat = binofit(k,n);
prob = binopdf(k,n,p)
